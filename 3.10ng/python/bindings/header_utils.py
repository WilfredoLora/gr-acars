#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later
#
# header_utils.py
#
# Utilities for reading values in header (pybind) files, specifically the
# BINDTOOL_* lines generated by GNU Radioâ€™s binding tool (gr_modtool).
#

import re
from argparse import ArgumentParser


class PybindHeaderParser:
    """
    Parse a pybind-based C++ file for BINDTOOL_* comment lines, extracting
    metadata used by the binding tool.
    """
    def __init__(self, pathname: str) -> None:
        with open(pathname, 'r') as f:
            self.file_txt = f.read()

    def get_flag_automatic(self) -> bool:
        """
        Returns True if BINDTOOL_GEN_AUTOMATIC(...) is set to (1),
        otherwise False.
        """
        m = re.search(r'BINDTOOL_GEN_AUTOMATIC\(([^\s])\)', self.file_txt)
        return bool(m and m.group(1) == '1')

    def get_flag_pygccxml(self) -> bool:
        """
        Returns True if BINDTOOL_USE_PYGCCXML(...) is set to (1),
        otherwise False.
        """
        m = re.search(r'BINDTOOL_USE_PYGCCXML\(([^\s])\)', self.file_txt)
        return bool(m and m.group(1) == '1')

    def get_header_filename(self) -> str:
        """
        Returns the string inside BINDTOOL_HEADER_FILE(...),
        or None if not found.
        """
        m = re.search(r'BINDTOOL_HEADER_FILE\(([^\s]*)\)', self.file_txt)
        return m.group(1) if m else None

    def get_header_file_hash(self) -> str:
        """
        Returns the string inside BINDTOOL_HEADER_FILE_HASH(...),
        or None if not found.
        """
        m = re.search(r'BINDTOOL_HEADER_FILE_HASH\(([^\s]*)\)', self.file_txt)
        return m.group(1) if m else None

    def get_flags(self) -> str:
        """
        Returns a semicolon-separated string of all four parsed values:
          - get_flag_automatic
          - get_flag_pygccxml
          - get_header_filename
          - get_header_file_hash
        """
        return f'{self.get_flag_automatic()};' \
               f'{self.get_flag_pygccxml()};' \
               f'{self.get_header_filename()};' \
               f'{self.get_header_file_hash()};'


def parse_args():
    """
    Parse command-line arguments for this script.
    """
    desc = 'Reads the parameters from the comment block in a pybind C++ file.'
    parser = ArgumentParser(description=desc)

    parser.add_argument(
        "function",
        help="Operation to perform on comment block",
        choices=["flag_auto", "flag_pygccxml", "header_filename", "header_file_hash", "all"]
    )
    parser.add_argument(
        "pathname",
        help="Path to the pybind .cc file to read (e.g. blockname_python.cc)"
    )

    return parser.parse_args()


def main():
    args = parse_args()
    parser = PybindHeaderParser(args.pathname)

    if args.function == "flag_auto":
        print(parser.get_flag_automatic())
    elif args.function == "flag_pygccxml":
        print(parser.get_flag_pygccxml())
    elif args.function == "header_filename":
        print(parser.get_header_filename())
    elif args.function == "header_file_hash":
        print(parser.get_header_file_hash())
    elif args.function == "all":
        print(parser.get_flags())


if __name__ == "__main__":
    main()
